#This module jsut creates function is to run ode_function from TenTai_class

import numpy as np
from scipy.integrate import ode


def run_Dt(x0,t_start,t_end,object):
    
    ts = [t_start]
    ys = [x0]
    
    r_e =  ode(object).set_integrator('lsoda', method='bdf')
    r_e.set_initial_value(x0,t_start)
    
    while ts[-1] < t_end:
        if ts[-1] < 1:
            t_step=0.01
        elif ts[-1] < round(10**(np.log10(t_end)/2)):
            t_step=round(10**(np.log10(t_end)/2)/10000)
        else:
            t_step=round(t_end/10000)    
        ts.append(r_e.t+t_step)
        ys.append(r_e.integrate(r_e.t+t_step)) 
    t_xs=np.hstack((np.vstack(ts),np.vstack(ys)))
    return t_xs


def run_Dt_find_t(x0,t_start,t_end,object):
    
    ts = [t_start]
    ys = [x0]
    
    r_e =  ode(object).set_integrator('lsoda', method='bdf')
    r_e.set_initial_value(x0,t_start)
    
    while ts[-1] < t_end:
        #t_step=round(t_end/5e7)    
        t_step=1    
        ts.append(r_e.t+t_step)
        ys.append(r_e.integrate(r_e.t+t_step)) 
    t_xs=np.hstack((np.vstack(ts),np.vstack(ys)))
    return t_xs

def run_Q(x0,t_start,t_end,object):
        
    ts = [t_start]
    ys = [x0]
    
    r_e =  ode(object).set_integrator('lsoda', method='bdf')
    r_e.set_initial_value(x0,t_start)

    error=10**-4

    while ts[-1] < t_end: 
        if ys[-1][0]>3/2: 
            if ys[-1][1]>3/2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1)         
            elif ys[-1][1]==3/2:   r_e.set_f_params(15/2,51/4,57/8,-19/4,-45/8,-33/16,1,1)         
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(15/2,51/4,57/8,-17,-24,-45/4,1,1)
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(15/2,51/4,57/8,-12,-19,-21/2,1,0)
            else: r_e.set_f_params(15/2,51/4,57/8,-7,-14,-39/4,1,-1)
        elif ys[-1][0]==3/2: 
            if ys[-1][1]>3/2:   r_e.set_f_params(-19/4,-45/8,-33/16,15/2,51/4,57/8,1,1)         
            elif ys[-1][1]==3/2:   r_e.set_f_params(-19/4,-45/8,-33/16,-19/4,-45/8,-33/16,1,1)         
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-19/4,-45/8,-33/16,-17,-24,-45/4,1,1)
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-19/4,-45/8,-33/16,-12,-19,-21/2,1,0)
            else: r_e.set_f_params(-19/4,-45/8,-33/16,-7,-14,-39/4,1,-1)
        elif ys[-1][0]<3/2 and ys[-1][0]>1+error: 
            if ys[-1][1]>3/2:   r_e.set_f_params(-17,-24,-45/4,15/2,51/4,57/8,1,1)         
            elif ys[-1][1]==3/2:   r_e.set_f_params(-17,-24,-45/4,-19/4,-45/8,-33/16,1,1)         
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-17,-24,-45/4,-17,-24,-45/4,1,1)
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-17,-24,-45/4,-12,-19,-21/2,1,0)
            else: r_e.set_f_params(-17,-24,-45/4,-7,-14,-39/4,1,-1)
        elif abs(ys[-1][0]-1)<=error: 
            if ys[-1][1]>3/2:   r_e.set_f_params(-12,-19,-21/2,15/2,51/4,57/8,0,1)         
            elif ys[-1][1]==3/2:   r_e.set_f_params(-12,-19,-21/2,-19/4,-45/8,-33/16,0,1)         
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-12,-19,-21/2,-17,-24,-45/4,0,1)
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-12,-19,-21/2,-12,-19,-21/2,0,0)
            else: r_e.set_f_params(-12,-19,-21/2,-7,-14,-39/4,0,-1)
        else: 
            if ys[-1][1]>3/2:   r_e.set_f_params(-7,-14,-39/4,15/2,51/4,57/8,-1,1)         
            elif ys[-1][1]==3/2:   r_e.set_f_params(-7,-14,-39/4,-19/4,-45/8,-33/16,-1,1)         
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-7,-14,-39/4,-17,-24,-45/4,-1,1)
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-7,-14,-39/4,-12,-19,-21/2,-1,0)
            else: r_e.set_f_params(-7,-14,-39/4,-7,-14,-39/4,-1,-1)
        if ts[-1]<10000:
            t_step=1
        else:
            t_step=100        
        ts.append(r_e.t+t_step)
        ys.append(r_e.integrate(r_e.t+t_step))
        
    t_xs=np.hstack((np.vstack(ts),np.vstack(ys)))
    return t_xs


def run_Q_exactly(x0,t_start,t_end,object):
        
    ts = [t_start]
    ys = [x0]
    
    r_e =  ode(object).set_integrator('lsoda', method='bdf')
    r_e.set_initial_value(x0,t_start)

    error=10**-4

    while ts[-1] < t_end: 
        if ys[-1][0]>2: 
            if ys[-1][1]>2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,105/4,2103/32,2937/64,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,105/4,2103/32,2937/64,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,105/4,2103/32,2937/64,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(15/2,51/4,57/8,-19/4,-45/8,-33/16,1,1,105/4,2103/32,2937/64,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(15/2,51/4,57/8,-17,-24,-45/4,1,1,105/4,2103/32,2937/64,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(15/2,51/4,57/8,-12,-19,-21/2,1,0,105/4,2103/32,2937/64,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(15/2,51/4,57/8,-7,-14,-39/4,1,-1,105/4,2103/32,2937/64,-211/8,-1183/16,-1785/32)            
        elif ys[-1][0]==2: 
            if ys[-1][1]>2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-46,-2113/32,-2775/64,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-46,-2113/32,-2775/64,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-46,-2113/32,-2775/64,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(15/2,51/4,57/8,-19/4,-45/8,-33/16,1,1,-46,-2113/32,-2775/64,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(15/2,51/4,57/8,-17,-24,-45/4,1,1,-46,-2113/32,-2775/64,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(15/2,51/4,57/8,-12,-19,-21/2,1,0,-46,-2113/32,-2775/64,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(15/2,51/4,57/8,-7,-14,-39/4,1,-1,-46,-2113/32,-2775/64,-211/8,-1183/16,-1785/32)            
        elif ys[-1][0]>3/2: 
            if ys[-1][1]>2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-473/4,-6329/32,-8487/64,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-473/4,-6329/32,-8487/64,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(15/2,51/4,57/8,15/2,51/4,57/8,1,1,-473/4,-6329/32,-8487/64,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(15/2,51/4,57/8,-19/4,-45/8,-33/16,1,1,-473/4,-6329/32,-8487/64,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(15/2,51/4,57/8,-17,-24,-45/4,1,1,-473/4,-6329/32,-8487/64,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(15/2,51/4,57/8,-12,-19,-21/2,1,0,-473/4,-6329/32,-8487/64,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(15/2,51/4,57/8,-7,-14,-39/4,1,-1,-473/4,-6329/32,-8487/64,-211/8,-1183/16,-1785/32)            
        elif ys[-1][0]==3/2: 
            if ys[-1][1]>2:   r_e.set_f_params(-19/4,-45/8,-33/16,15/2,51/4,57/8,1,1,-1031/16,-9079/64,-14217/128,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(-19/4,-45/8,-33/16,15/2,51/4,57/8,1,1,-1031/16,-9079/64,-14217/128,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(-19/4,-45/8,-33/16,15/2,51/4,57/8,1,1,-1031/16,-9079/64,-14217/128,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(-19/4,-45/8,-33/16,-19/4,-45/8,-33/16,1,1,-1031/16,-9079/64,-14217/128,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-19/4,-45/8,-33/16,-17,-24,-45/4,1,1,-1031/16,-9079/64,-14217/128,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-19/4,-45/8,-33/16,-12,-19,-21/2,1,0,-1031/16,-9079/64,-14217/128,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(-19/4,-45/8,-33/16,-7,-14,-39/4,1,-1,-1031/16,-9079/64,-14217/128,-211/8,-1183/16,-1785/32)   
        elif ys[-1][0]<3/2 and ys[-1][0]>1+error: 
            if ys[-1][1]>2:   r_e.set_f_params(-17,-24,-45/4,15/2,51/4,57/8,1,1,-85/8,-1375/16,-2865/32,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(-17,-24,-45/4,15/2,51/4,57/8,1,1,-85/8,-1375/16,-2865/32,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(-17,-24,-45/4,15/2,51/4,57/8,1,1,-85/8,-1375/16,-2865/32,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(-17,-24,-45/4,-19/4,-45/8,-33/16,1,1,-85/8,-1375/16,-2865/32,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-17,-24,-45/4,-17,-24,-45/4,1,1,-85/8,-1375/16,-2865/32,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-17,-24,-45/4,-12,-19,-21/2,1,0,-85/8,-1375/16,-2865/32,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(-17,-24,-45/4,-7,-14,-39/4,1,-1,-85/8,-1375/16,-2865/32,-211/8,-1183/16,-1785/32)
        elif abs(ys[-1][0]-1)<=error: 
            if ys[-1][1]>2:   r_e.set_f_params(-12,-19,-21/2,15/2,51/4,57/8,0,1,-37/2,-1279/16,-2325/32,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(-12,-19,-21/2,15/2,51/4,57/8,0,1,-37/2,-1279/16,-2325/32,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(-12,-19,-21/2,15/2,51/4,57/8,0,1,-37/2,-1279/16,-2325/32,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(-12,-19,-21/2,-19/4,-45/8,-33/16,0,1,-37/2,-1279/16,-2325/32,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-12,-19,-21/2,-17,-24,-45/4,0,1,-37/2,-1279/16,-2325/32,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-12,-19,-21/2,-12,-19,-21/2,0,0,-37/2,-1279/16,-2325/32,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(-12,-19,-21/2,-7,-14,-39/4,0,-1,-37/2,-1279/16,-2325/32,-211/8,-1183/16,-1785/32)
        else: 
            if ys[-1][1]>2:   r_e.set_f_params(-7,-14,-39/4,15/2,51/4,57/8,-1,1,-211/8,-1183/16,-1785/32,105/4,2103/32,2937/64)   
            elif ys[-1][1]==2:   r_e.set_f_params(-7,-14,-39/4,15/2,51/4,57/8,-1,1,-211/8,-1183/16,-1785/32,-46,-2113/32,-2775/64)   
            elif ys[-1][1]>3/2:   r_e.set_f_params(-7,-14,-39/4,15/2,51/4,57/8,-1,1,-211/8,-1183/16,-1785/32,-473/4,-6329/32,-8487/64)   
            elif ys[-1][1]==3/2:   r_e.set_f_params(-7,-14,-39/4,-19/4,-45/8,-33/16,-1,1,-211/8,-1183/16,-1785/32,-1031/16,-9079/64,-14217/128)            
            elif ys[-1][1]<3/2 and ys[-1][1]>1+error: r_e.set_f_params(-7,-14,-39/4,-17,-24,-45/4,-1,1,-211/8,-1183/16,-1785/32,-85/8,-1375/16,-2865/32)            
            elif abs(ys[-1][1]-1)<error: r_e.set_f_params(-7,-14,-39/4,-12,-19,-21/2,-1,0,-211/8,-1183/16,-1785/32,-37/2,-1279/16,-2325/32)            
            else: r_e.set_f_params(-7,-14,-39/4,-7,-14,-39/4,-1,-1,-211/8,-1183/16,-1785/32,-211/8,-1183/16,-1785/32)
        if ts[-1]<10000:
            t_step=1
        else:
            t_step=10
        ts.append(r_e.t+t_step)
        ys.append(r_e.integrate(r_e.t+t_step))
        
    t_xs=np.hstack((np.vstack(ts),np.vstack(ys)))
    return t_xs